/*
  Auto-generated by Spline
*/

import useSpline from "@splinetool/r3f-spline";
import { OrthographicCamera, PerspectiveCamera } from "@react-three/drei";
import { useRef, useState, useEffect } from "react";
import { useFrame } from "@react-three/fiber";

export default function SceneBall({
  talking = false,
  onSelect = () => {},
  ...props
}) {
  const { nodes, materials } = useSpline(
    "https://prod.spline.design/F5Cd4TXjxVfRX7nX/scene.splinecode"
  );

  // References for all spheres
  const mainSphereRef = useRef();
  const sphere2Ref = useRef();
  const sphere3Ref = useRef();
  const sphere4Ref = useRef();
  const sphere5Ref = useRef();
  const sphere6Ref = useRef();
  const sphere1Ref = useRef(); // Head sphere

  // State for mouse position
  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });

  // Track mouse position
  useEffect(() => {
    const handleMouseMove = (e) => {
      // Get normalized mouse coordinates (-1 to 1)
      const x = (e.clientX / window.innerWidth) * 2 - 1;
      const y = -(e.clientY / window.innerHeight) * 2 + 1;
      setMousePos({ x, y });
    };

    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  // Handle animation
  useFrame(({ clock }) => {
    // Animation time value
    const time = clock.getElapsedTime();

    // List of all sphere refs
    const sphereRefs = [
      //   mainSphereRef,
      //   sphere2Ref,
      //   sphere3Ref,
      //   sphere4Ref,
      //   sphere5Ref,
      //   sphere6Ref,
      sphere1Ref,
    ];

    // Animate all spheres if talking
    if (talking) {
      sphereRefs.forEach((sphereRef, index) => {
        if (sphereRef.current) {
          // Different phase for each sphere to create wave-like effect
          const phase = index * 0.3;
          // Dramatic pulsing with different frequencies
          const pulseFactor = Math.sin(time * 8 + phase) * 0.5 + 1;
          sphereRef.current.scale.set(
            pulseFactor,
            pulseFactor,
            pulseFactor * 1.01
          );
        }
      });
    } else {
      // Reset all spheres when not talking
      sphereRefs.forEach((sphereRef) => {
        if (sphereRef.current) {
          sphereRef.current.scale.set(1, 1, 1.01);
        }
      });
    }

    // Make main sphere follow cursor
    if (mainSphereRef.current) {
      // Keep original Z rotation
      const baseRotZ = -Math.PI / 2;

      // Follow cursor with more pronounced rotation
      mainSphereRef.current.rotation.x = baseRotZ + mousePos.y * 0.7;
      mainSphereRef.current.rotation.y = mousePos.x * 0.7;
    }
  });

  return (
    <>
      <color attach="background" args={["#020203"]} />
      <group {...props} dispose={null}>
        <scene name="Scene">
          <group
            name="Group 4"
            position={[0, 409.66, -12]}
            rotation={[0, -Math.PI / 2, 0]}
          >
            <group
              name="Group 5"
              position={[5.13, 4.17, 1.05]}
              rotation={[0, Math.PI / 2, 0]}
            >
              <mesh
                name="Sphere 6"
                geometry={nodes["Sphere 6"].geometry}
                material={materials["Sphere 6 Material"]}
                castShadow
                receiveShadow
                position={[105.15, 49.49, 46.26]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={[1, 1, 1.01]}
                ref={sphere6Ref}
                onClick={(e) => onSelect("Sphere 6")}
              />
              <mesh
                name="Sphere 5"
                geometry={nodes["Sphere 5"].geometry}
                material={materials["Sphere 5 Material"]}
                castShadow
                receiveShadow
                position={[-11.11, -75.43, 67.28]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={[1, 1, 1.01]}
                ref={sphere5Ref}
                onClick={(e) => onSelect("Sphere 5")}
              />
              <mesh
                name="Sphere 4"
                geometry={nodes["Sphere 4"].geometry}
                material={materials["Sphere 4 Material"]}
                castShadow
                receiveShadow
                position={[62.37, -77.38, -91.18]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={[1, 1, 1.01]}
                ref={sphere4Ref}
                onClick={(e) => onSelect("Sphere 4")}
              />
              <mesh
                name="Sphere 3"
                geometry={nodes["Sphere 3"].geometry}
                material={materials["Sphere 3 Material"]}
                castShadow
                receiveShadow
                position={[-120.44, -64.57, 12.23]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={[1, 1, 1.01]}
                ref={sphere3Ref}
                onClick={(e) => onSelect("Sphere 3")}
              />
              <mesh
                name="Sphere 2"
                geometry={nodes["Sphere 2"].geometry}
                material={materials["Sphere 2 Material"]}
                castShadow
                receiveShadow
                position={[-1.96, 28.7, -91.18]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={[1, 1, 1.01]}
                ref={sphere2Ref}
                onClick={(e) => onSelect("Sphere 2")}
              />
              <mesh
                name="Sphere"
                geometry={nodes.Sphere.geometry}
                material={materials["Sphere Material"]}
                castShadow
                receiveShadow
                position={[-80.37, 82.46, -70.92]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={[1, 1, 1.01]}
                ref={mainSphereRef}
                onClick={(e) => onSelect("Main Sphere")}
              />
            </group>
            <mesh
              name="Rectangle 2"
              geometry={nodes["Rectangle 2"].geometry}
              material={materials.eyes}
              castShadow
              receiveShadow
              position={[250.29, 18.92, -49.58]}
              rotation={[-Math.PI / 2, Math.PI / 2, 0]}
              scale={1}
              onClick={(e) => onSelect("Right Eye")}
            />
            <mesh
              name="Rectangle"
              geometry={nodes.Rectangle.geometry}
              material={materials.eyes}
              castShadow
              receiveShadow
              position={[250.29, 18.92, 58.13]}
              rotation={[-Math.PI / 2, Math.PI / 2, 0]}
              scale={1}
              onClick={(e) => onSelect("Left Eye")}
            />
            <mesh
              name="Sphere1"
              geometry={nodes.Sphere1.geometry}
              material={materials["Sphere1 Material"]}
              castShadow
              receiveShadow
              position={[-0.71, 0, 0]}
              rotation={[-Math.PI / 2, 0, 0]}
              ref={sphere1Ref}
              onClick={(e) => onSelect("Head Sphere")}
            />
          </group>
          <PerspectiveCamera
            name="Camera"
            makeDefault={true}
            far={100000}
            near={5}
            fov={45}
            position={[-5.85, 764.79, 1999.61]}
            rotation={[-0.2, -0.01, 0]}
          />
          <mesh
            name="Floor"
            geometry={nodes.Floor.geometry}
            material={materials["Floor Material"]}
            castShadow
            receiveShadow
            position={[0, 14, -2]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
            onClick={(e) => onSelect("Floor")}
          />
          <OrthographicCamera
            name="1"
            makeDefault={false}
            far={10000}
            near={-50000}
          />
          <hemisphereLight
            name="Default Ambient Light"
            intensity={0.75}
            color="#eaeaea"
          />
        </scene>
      </group>
    </>
  );
}
