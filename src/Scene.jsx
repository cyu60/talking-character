/*
  Auto-generated by Spline
*/

import useSpline from "@splinetool/r3f-spline";
import { OrthographicCamera, PerspectiveCamera } from "@react-three/drei";
import { useRef, useState, useEffect } from "react";
import { useFrame } from "@react-three/fiber";

export default function Scene({ talking = false, ...props }) {
  const { nodes, materials } = useSpline(
    "https://prod.spline.design/AEdvKX3iQxA6R5cC/scene.splinecode"
  );
  const faceRef = useRef();
  const [morphTargetNames, setMorphTargetNames] = useState([]);

  // Get the available morph targets for mouth movements
  useEffect(() => {
    if (faceRef.current?.morphTargetDictionary) {
      // Find all mouth-related morphs (usually contain 'mouth' or similar in name)
      const mouthMorphs = Object.keys(
        faceRef.current.morphTargetDictionary
      ).filter(
        (name) =>
          // name.toLowerCase().includes("mouth") ||
          name.toLowerCase().includes("jaw")
        // ||
        // name.toLowerCase().includes("lips")
      );
      setMorphTargetNames(mouthMorphs);
      console.log("Available morph targets:", mouthMorphs);
    }
  }, [faceRef.current]);

  // Animation loop for talking
  useFrame(({ clock }) => {
    if (!talking || !faceRef.current || morphTargetNames.length === 0) return;

    // Simple talking animation
    morphTargetNames.forEach((morphName) => {
      const morphIndex = faceRef.current.morphTargetDictionary[morphName];
      if (morphIndex !== undefined) {
        // Create natural-looking mouth movements
        const timeOffset = morphIndex * 0.2; // offset each morph slightly
        const value =
          Math.sin(clock.getElapsedTime() * 3 + timeOffset) * 0.5 + 0.5;
        faceRef.current.morphTargetInfluences[morphIndex] = value * 0.8; // Scale down intensity
      }
    });
  });

  return (
    <>
      <color attach="background" args={["#000000"]} />
      <group {...props} dispose={null}>
        <scene name="Scene 1">
          <mesh
            name="Input"
            geometry={nodes.Input.geometry}
            material={materials["Input Material"]}
            castShadow
            receiveShadow
            position={[-263.46, 92.21, 0]}
          />
          <PerspectiveCamera
            name="Camera"
            makeDefault={true}
            far={100000}
            near={70}
            fov={45}
            up={[0, 1, 0]}
            position={[-1.05, 254.39, 967.2]}
            rotation={[-0.25, 0, 0]}
          />
          <group name="Face" position={[2, 72.62, 0]}>
            <group name="scaleContainer" position={[0, -77.62, 0]}>
              <group name="rotationContainer" position={[0, -99.98, -147.87]}>
                <mesh
                  name="Sphere 2"
                  geometry={nodes["Sphere 2"].geometry}
                  material={materials.Eyes}
                  castShadow
                  receiveShadow
                  position={[56.77, 189.41, 115.33]}
                  scale={0.4}
                />
                <mesh
                  name="Sphere"
                  geometry={nodes.Sphere.geometry}
                  material={materials.Eyes}
                  castShadow
                  receiveShadow
                  position={[-56.28, 189.41, 114.79]}
                  scale={0.4}
                />
                <mesh
                  name="face"
                  geometry={nodes.face.geometry}
                  material={nodes.face.material}
                  castShadow
                  receiveShadow
                  morphTargetDictionary={nodes.face.morphTargetDictionary}
                  morphTargetInfluences={nodes.face.morphTargetInfluences}
                  position={[-189.77, 434.58, -211.71]}
                  rotation={[Math.PI / 2, 0, 0]}
                  scale={0.04}
                  ref={faceRef}
                />
              </group>
            </group>
          </group>
          <OrthographicCamera
            name="1"
            makeDefault={false}
            far={10000}
            near={-50000}
          />
        </scene>
      </group>
    </>
  );
}
